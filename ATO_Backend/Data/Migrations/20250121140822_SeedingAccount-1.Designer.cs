// <auto-generated />
using System;
using Data.ArmsContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ATODbContext))]
    [Migration("20250121140822_SeedingAccount-1")]
    partial class SeedingAccount1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAccountActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8c777a9-55b9-4b3d-860a-d7b56e4c24b7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56f4b59d-0367-49c2-99b4-5ed8f05a204d",
                            Email = "thutt170727@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "THUTT170727@GMAIL.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEG0tpc+iYMCHPj9Q1gr1SAGMw3pjcSOcPTasiCOQx4dnV8QY61j8OKvcNmUOrQaZXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f35a76a-366e-4187-a844-7bbb6c3b138c",
                            TwoFactorEnabled = false,
                            UserName = "Administrator",
                            isAccountActive = true
                        },
                        new
                        {
                            Id = new Guid("11a068d3-9af4-484c-82a2-e2b5c9d8b5ab"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d2a84db-3a7f-4dbc-99b0-8da43a6f3e7b",
                            Email = "lucianafuste0717@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Content Moderators",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCIANAFUSTE0717@GMAIL.COM",
                            NormalizedUserName = "CONTENTMODERATORS",
                            PasswordHash = "AQAAAAIAAYagAAAAEAIj51qf1veh0YwXdJMYtoiIUiSJhbNLXu1xJEMNWacSthlLHNfrD66rPm4qt8X0dw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0636cb4e-5e02-4462-b49e-c6601362e59a",
                            TwoFactorEnabled = false,
                            UserName = "ContentModerators",
                            isAccountActive = true
                        },
                        new
                        {
                            Id = new Guid("053d18ef-ba0e-4141-b142-898d28fa9b5d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6154913-345b-49d8-addd-553eacc2485a",
                            Email = "truongthu112201@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Tourism Companies",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRUONGTHU112201@GMAIL.COM",
                            NormalizedUserName = "TOURISMCOMPANIES",
                            PasswordHash = "AQAAAAIAAYagAAAAEIFraRB7GRC8HOIU2vFpFzp9C/L+qUoFjY5rCs4aPiC0urnUHpPrbhVHec1DmFAr9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1031835-a99d-4939-beef-1843a81c51af",
                            TwoFactorEnabled = false,
                            UserName = "TourismCompanies",
                            isAccountActive = true
                        },
                        new
                        {
                            Id = new Guid("a631bb94-66d8-44db-932b-532892d87754"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "849bade2-9b89-402f-9529-5c6024144daf",
                            Email = "thutt170727@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Agricultural Tourism Facility Owners",
                            LockoutEnabled = false,
                            NormalizedEmail = "THUTT170727@GMAIL.COM",
                            NormalizedUserName = "ATFO",
                            PasswordHash = "AQAAAAIAAYagAAAAEEAZ5cs+4n/fg06oThRGhLYXVMKJAGHr6IkJuXWWtD/8imVEoiLvrV1sUhPzIa2HZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "244359de-1e28-439b-b178-dc3356c89c72",
                            TwoFactorEnabled = false,
                            UserName = "ATFO",
                            isAccountActive = true
                        },
                        new
                        {
                            Id = new Guid("e025738e-4686-4282-abc3-dae9c65907f0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ae26256-d382-4cb4-b537-2a0c7ad39541",
                            Email = "ThangNVSE151059@fpt.edu.vn",
                            EmailConfirmed = true,
                            Fullname = "Tourists",
                            LockoutEnabled = false,
                            NormalizedEmail = "THANGNVSE151059@FPT.EDU.VN",
                            NormalizedUserName = "TOURIST",
                            PasswordHash = "AQAAAAIAAYagAAAAELEdBoBmowDloEvRuV7t93Hze4OSFTw/oqeS+4IXTP7c2UUIqf4rTZ/nUoo/iTpWGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de4cbd11-1f6c-448c-b0cc-b7f18c85cbef",
                            TwoFactorEnabled = false,
                            UserName = "Tourists",
                            isAccountActive = true
                        },
                        new
                        {
                            Id = new Guid("64454a5e-9883-4548-9a9d-d7986bf6b3ad"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48c876b8-ed13-4c1a-9666-b1923f99997a",
                            Email = "thuthuhe2501@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "TourGuides",
                            LockoutEnabled = false,
                            NormalizedEmail = "THUTHUHE2501@GMAIL.COM",
                            NormalizedUserName = "TOURGUIDES",
                            PasswordHash = "AQAAAAIAAYagAAAAEGGXEK/VsygpcKAJ938BagNr/jdz+BPqG4KYFmZMa2wn2EslJDKITbiMx4ic7kw+tQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8a707f2-39a0-45cc-b05d-573e030ebeea",
                            TwoFactorEnabled = false,
                            UserName = "TourGuides",
                            isAccountActive = true
                        });
                });

            modelBuilder.Entity("Data.Models.Blog", b =>
                {
                    b.Property<Guid>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BlogStatus")
                        .HasColumnType("int");

                    b.Property<int>("BlogType")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkImg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplyRequest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("BlogId");

                    b.HasIndex("CreateBy");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8fd818f-63f1-49ee-bec5-f7b66cafbfca"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("0dae2462-9ebd-452e-a89c-06d4b6025e68"),
                            Name = "Content Moderators",
                            NormalizedName = "CONTENTMODERATORS"
                        },
                        new
                        {
                            Id = new Guid("6f8cdfbe-2d8f-4b5e-b767-194cba66309a"),
                            Name = "Tourism Companies",
                            NormalizedName = "TOURISMCOMPANIES"
                        },
                        new
                        {
                            Id = new Guid("49e15ef3-2d88-4812-955f-d00859b3f7e3"),
                            Name = "Agricultural Tourism Facility Owners",
                            NormalizedName = "ATFO"
                        },
                        new
                        {
                            Id = new Guid("c78a64eb-5190-44c1-9886-ca707854b807"),
                            Name = "Tourists",
                            NormalizedName = "TOURISTS"
                        },
                        new
                        {
                            Id = new Guid("870dd1ec-c340-41ee-9088-0f3612f510cd"),
                            Name = "Tour Guides",
                            NormalizedName = "TOURGUIDES"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b8c777a9-55b9-4b3d-860a-d7b56e4c24b7"),
                            RoleId = new Guid("b8fd818f-63f1-49ee-bec5-f7b66cafbfca")
                        },
                        new
                        {
                            UserId = new Guid("11a068d3-9af4-484c-82a2-e2b5c9d8b5ab"),
                            RoleId = new Guid("0dae2462-9ebd-452e-a89c-06d4b6025e68")
                        },
                        new
                        {
                            UserId = new Guid("053d18ef-ba0e-4141-b142-898d28fa9b5d"),
                            RoleId = new Guid("6f8cdfbe-2d8f-4b5e-b767-194cba66309a")
                        },
                        new
                        {
                            UserId = new Guid("a631bb94-66d8-44db-932b-532892d87754"),
                            RoleId = new Guid("49e15ef3-2d88-4812-955f-d00859b3f7e3")
                        },
                        new
                        {
                            UserId = new Guid("e025738e-4686-4282-abc3-dae9c65907f0"),
                            RoleId = new Guid("c78a64eb-5190-44c1-9886-ca707854b807")
                        },
                        new
                        {
                            UserId = new Guid("64454a5e-9883-4548-9a9d-d7986bf6b3ad"),
                            RoleId = new Guid("870dd1ec-c340-41ee-9088-0f3612f510cd")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Data.Models.Blog", b =>
                {
                    b.HasOne("Data.Models.Account", "Account")
                        .WithMany("Blogs")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Account", b =>
                {
                    b.Navigation("Blogs");
                });
#pragma warning restore 612, 618
        }
    }
}
